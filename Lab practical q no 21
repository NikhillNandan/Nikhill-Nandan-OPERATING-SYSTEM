#include<stdio.h>

int main() {

    int partitions[] = {300, 600, 350, 200, 750, 125};

    int n = sizeof(partitions) / sizeof(partitions[0]);  

    int processes[] = {115, 500, 358, 200, 375};

    int m = sizeof(processes) / sizeof(processes[0]);

    int allocated[m];

  

    for (int i = 0; i < m; i++) {

        allocated[i] = -1;

    }

    // allocate memory blocks using worst-fit algorithm

    for (int i = 0; i < m; i++) {

        int index = -1;

        for (int j = 0; j < n; j++) {

            if (partitions[j] >= processes[i]) {

                if (index == -1 || partitions[j] > partitions[index]) {

                    index = j;

                }

            }

        }

        if (index != -1) {

            allocated[i] = index;

            partitions[index] -= processes[i];

        }

    }

    // print allocation table

    printf("Process No.\tProcess Size\tAllocated Partition\n");

    for (int i = 0; i < m; i++) {

        printf("%d\t\t%d KB\t\t", i+1, processes[i]);

        if (allocated[i] != -1) {

            printf("%d\n", allocated[i]+1);

        } else {

            printf("Not Allocated\n");

        }

    }

    return 0;

}#include<stdio.h>

int main() {

    int partitions[] = {300, 600, 350, 200, 750, 125};

    int n = sizeof(partitions) / sizeof(partitions[0]);  

    int processes[] = {115, 500, 358, 200, 375};

    int m = sizeof(processes) / sizeof(processes[0]);

    int allocated[m];

  

    for (int i = 0; i < m; i++) {

        allocated[i] = -1;

    }

    // allocate memory blocks using worst-fit algorithm

    for (int i = 0; i < m; i++) {

        int index = -1;

        for (int j = 0; j < n; j++) {

            if (partitions[j] >= processes[i]) {

                if (index == -1 || partitions[j] > partitions[index]) {

                    index = j;

                }

            }

        }

        if (index != -1) {

            allocated[i] = index;

            partitions[index] -= processes[i];

        }

    }

    // print allocation table

    printf("Process No.\tProcess Size\tAllocated Partition\n");

    for (int i = 0; i < m; i++) {

        printf("%d\t\t%d KB\t\t", i+1, processes[i]);

        if (allocated[i] != -1) {

            printf("%d\n", allocated[i]+1);

        } else {

            printf("Not Allocated\n");

        }

    }

    return 0;

}
